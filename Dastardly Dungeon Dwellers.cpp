#include "Dastardly Dungeon Dwellers.h"

#include <iostream>
#include <string>

#include "Art.h"
#include "Main Menu.h"
#include "Map.h"
#include "Player.h"
#include "Room Controller.h"

using std::cin;
using std::cout;
using std::string;

// BEGIN TESTING PROTOTYPES | FUNCTIONS | INCLUDES
// !
// TODO
// ?
// *
/*

#include "boost/random/mersenne_twister.hpp"
#include "boost/random/uniform_int_distribution.hpp"
#include "boost/random/discrete_distribution.hpp"

*/
// !
// TODO
// ?
// *
// END TESTING PROTOTYPES | FUNCTIONS | INCLUDES

int main()
{
  // BEGIN TESTING CODE
  // !
  // TODO
  // ?
  // *
  /*

  // Random number 1-100
  boost::random::mt19937 gen(std::time(nullptr));
  boost::random::uniform_int_distribution<> dist1(1, 100);
  cout << dist1(gen) << "\n";

  // Weighted probability 1-6
  double probabilities[] = {0.5, 0.1, 0.1, 0.1, 0.1, 0.1};
  boost::random::discrete_distribution<> dist2(probabilities);
  cout << dist2(gen) + 1 << "\n";

  cout << "\n\n\n\n";

  */
  // !
  // TODO
  // ?
  // *
  // END TESTING CODE
  
  std::srand(std::time(nullptr));

  // I use a rand() here because the first value generated by rand() after srand() seems to be consistently increasing if the rand() bounds are large enough
  std::rand(); // rand range formula: min + (rand() % ((max + 1) - min))

  // Main function for the game, runs until the player wins or loses
  startGame();

  // Pause the end screen until the user is ready to close the application
  cout << "Press enter to exit the program: ";
  string enterKey = " ";
  getline(cin, enterKey);
  cout << "\n";

  return 0;
}

// Pre-condition: valid input file open
// Post-condition: runs until the game is over
void startGame()
{
  // Menu Art
  mainMenu();

  // These variables will be constantly tracked / updated while the game is played
  Player *player = new Player;
  bool gameOver = false, gameVictory = false;

  // Generates the map with rooms to traverse
  Map *map = new Map;

  // Runs the game until the player loses all of their health or wins the game
  do
    roomController(player, map, gameOver, gameVictory);
  while (!gameOver && !gameVictory);


  if (gameVictory)
    victoryArt(player);
  if (gameOver)
    gameOverArt(player);

  delete player;
  delete map;
}