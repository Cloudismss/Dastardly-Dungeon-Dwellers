#ifndef DASTARDLY_DUNGEON_DWELLERS_DASTARDLY_DUNGEON_DWELLERS_H
#define DASTARDLY_DUNGEON_DWELLERS_DASTARDLY_DUNGEON_DWELLERS_H

#include <iostream>
#include <string>

#include "Art.h"
#include "Main Menu.h"
#include "Map.h"
#include "Player.h"
#include "Room Controller.h"

using std::cin;
using std::cout;
using std::string;

class Game
{
private:
  bool gameOver;
  bool gameVictory;
  Player *player;
  Map *map;
  void start();
  void end();

public:
  Game() { start(); }
  ~Game() { end(); }
  bool running();
  void progress();
};

void Game::start()
{
  // Seed the random number generator
  std::srand(std::time(nullptr));

  // I use a rand() here because the first value generated by rand() after srand() seems to be consistently increasing if the rand() bounds are large enough
  std::rand(); // rand range formula: min + (rand() % ((max + 1) - min))

  // Menu Art
  mainMenu();

  // These variables will be constantly tracked / updated while the game is played
  player = new Player;
  gameOver = false, gameVictory = false;

  // Generates the map with rooms to traverse
  map = new Map;
}

void Game::end()
{
  // Print game results
  if (gameVictory)
    victoryArt(player);
  if (gameOver)
    gameOverArt(player);

  // Free memory
  delete player;
  delete map;

  // Pause the end screen until the user is ready to close the application
  cout << "Press enter to exit the program: ";
  string enterKey = " ";
  getline(cin, enterKey);
  cout << "\n";
}

bool Game::running()
{
  // Runs the game until the player loses all of their health or wins the game
  return !(gameOver || gameVictory);
}

void Game::progress()
{
  roomController(player, map, gameOver, gameVictory);
}

// BEGIN TESTING PROTOTYPES | FUNCTIONS | INCLUDES
// !
// TODO
// ?
// *
/*

#include "boost/random/mersenne_twister.hpp"
#include "boost/random/uniform_int_distribution.hpp"
#include "boost/random/discrete_distribution.hpp"

*/
// !
// TODO
// ?
// *
// END TESTING PROTOTYPES | FUNCTIONS | INCLUDES

void testCode()
{
  /*

  // Random number 1-100
  boost::random::mt19937 gen(std::time(nullptr));
  boost::random::uniform_int_distribution<> dist1(1, 100);
  cout << dist1(gen) << "\n";

  // Weighted probability 1-6
  double probabilities[] = {0.5, 0.1, 0.1, 0.1, 0.1, 0.1};
  boost::random::discrete_distribution<> dist2(probabilities);
  cout << dist2(gen) + 1 << "\n";

  cout << "\n\n\n\n";

  */
}

#endif //DASTARDLY_DUNGEON_DWELLERS_DASTARDLY_DUNGEON_DWELLERS_H
